#!/bin/bash

# Script de diagn√≥stico para deployment en Render
echo "üîç DIAGN√ìSTICO DE DEPLOYMENT - ECOMMERCE M4"
echo "=============================================="

# Informaci√≥n del sistema
echo "üìä INFORMACI√ìN DEL SISTEMA:"
echo "Node.js version: $(node --version)"
echo "NPM version: $(npm --version)"
echo "Sistema operativo: $(uname -a)"
echo "Directorio actual: $(pwd)"
echo ""

# Variables de entorno
echo "üåç VARIABLES DE ENTORNO:"
echo "NODE_ENV: ${NODE_ENV:-'no definida'}"
echo "PORT: ${PORT:-'no definida'}"
echo "DATABASE_URL: ${DATABASE_URL:+'definida'}"
echo "JWT_SECRET: ${JWT_SECRET:+'definida'}"
echo "CLOUDINARY_NAME: ${CLOUDINARY_NAME:+'definida'}"
echo "CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY:+'definida'}"
echo "CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET:+'definida'}"
echo ""

# Verificar archivos cr√≠ticos
echo "üìÅ ARCHIVOS CR√çTICOS:"
[ -f "package.json" ] && echo "‚úÖ package.json existe" || echo "‚ùå package.json NO existe"
[ -f "tsconfig.json" ] && echo "‚úÖ tsconfig.json existe" || echo "‚ùå tsconfig.json NO existe"
[ -f "src/main.ts" ] && echo "‚úÖ src/main.ts existe" || echo "‚ùå src/main.ts NO existe"
[ -f "src/app.module.ts" ] && echo "‚úÖ src/app.module.ts existe" || echo "‚ùå src/app.module.ts NO existe"
[ -f "build.sh" ] && echo "‚úÖ build.sh existe" || echo "‚ùå build.sh NO existe"
echo ""

# Verificar dependencias
echo "üì¶ DEPENDENCIAS:"
if [ -d "node_modules" ]; then
  echo "‚úÖ node_modules existe"
  echo "N√∫mero de paquetes instalados: $(ls node_modules | wc -l)"
else
  echo "‚ùå node_modules NO existe"
fi
echo ""

# Verificar build
echo "üî® ESTADO DEL BUILD:"
if [ -d "dist" ]; then
  echo "‚úÖ Directorio dist existe"
  [ -f "dist/main.js" ] && echo "‚úÖ dist/main.js existe" || echo "‚ùå dist/main.js NO existe"
  echo "Tama√±o del directorio dist: $(du -sh dist 2>/dev/null || echo 'No disponible')"
else
  echo "‚ùå Directorio dist NO existe"
fi
echo ""

# Verificar permisos
echo "üîê PERMISOS:"
[ -x "build.sh" ] && echo "‚úÖ build.sh es ejecutable" || echo "‚ùå build.sh NO es ejecutable"
[ -x "debug.sh" ] && echo "‚úÖ debug.sh es ejecutable" || echo "‚ùå debug.sh NO es ejecutable"
echo ""

# Verificar configuraci√≥n de TypeScript
echo "‚öôÔ∏è  CONFIGURACI√ìN TYPESCRIPT:"
if command -v tsc >/dev/null 2>&1; then
  echo "‚úÖ TypeScript est√° instalado: $(npx tsc --version)"
else
  echo "‚ùå TypeScript NO est√° instalado"
fi
echo ""

# Verificar configuraci√≥n de base de datos
echo "üóÑÔ∏è  CONFIGURACI√ìN DE BASE DE DATOS:"
if [ -n "$DATABASE_URL" ]; then
  echo "‚úÖ DATABASE_URL est√° definida"
  # Extraer informaci√≥n de la URL sin mostrar credenciales
  DB_INFO=$(echo $DATABASE_URL | sed 's/:\/\/[^@]*@/:\/\/***:***@/')
  echo "URL de conexi√≥n: $DB_INFO"
else
  echo "‚ùå DATABASE_URL NO est√° definida"
fi
echo ""

# Verificar configuraci√≥n de JWT
echo "üîë CONFIGURACI√ìN JWT:"
if [ -n "$JWT_SECRET" ]; then
  echo "‚úÖ JWT_SECRET est√° definida"
  echo "Longitud del secret: ${#JWT_SECRET} caracteres"
else
  echo "‚ùå JWT_SECRET NO est√° definida"
fi
echo ""

# Verificar configuraci√≥n de Cloudinary
echo "‚òÅÔ∏è  CONFIGURACI√ìN CLOUDINARY:"
if [ -n "$CLOUDINARY_NAME" ] && [ -n "$CLOUDINARY_API_KEY" ] && [ -n "$CLOUDINARY_API_SECRET" ]; then
  echo "‚úÖ Todas las variables de Cloudinary est√°n definidas"
else
  echo "‚ùå Faltan variables de Cloudinary:"
  [ -z "$CLOUDINARY_NAME" ] && echo "  - CLOUDINARY_NAME"
  [ -z "$CLOUDINARY_API_KEY" ] && echo "  - CLOUDINARY_API_KEY"
  [ -z "$CLOUDINARY_API_SECRET" ] && echo "  - CLOUDINARY_API_SECRET"
fi
echo ""

echo "üèÅ DIAGN√ìSTICO COMPLETADO"
echo "Si encuentras errores, revisa la configuraci√≥n en render.yaml"
